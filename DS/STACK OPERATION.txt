ALGORITHM:
1. Initialize stack with a maximum size.
2. PUSH: Check if the stack is full. If not, insert element at top.
3. POP: Check if the stack is empty. If not, remove the top element.
4. PEEK: Return the top element without removing it.
C Program:
#include <stdio.h>
#define SIZE 5
int stack[SIZE], top = -1;
void push(int val) {
    if (top == SIZE - 1)
        printf("Stack Overflow\n");
    else
        stack[++top] = val;
}
void pop() {
    if (top == -1)
        printf("Stack Underflow\n");
    else
        printf("Popped: %d\n", stack[top--]);
}
void peek() {
    if (top == -1)
        printf("Stack is Empty\n");
    else
        printf("Top Element: %d\n", stack[top]);
}
void display() {
    if (top == -1)
        printf("Stack is Empty\n");
    else {
        printf("Stack: ");
        for (int i = 0; i <= top; i++)
            printf("%d ", stack[i]);
        printf("\n");
    }
}
int main() {
    display();
    push(10);
    push(20);
    display();
    peek();
    pop();
    display();
    return 0;
}

